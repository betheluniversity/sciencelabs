<?php

namespace Bethel\EntityBundle\Entity;

use Doctrine\Common\Collections\Collection;
use Doctrine\ORM\EntityManager;
use Doctrine\ORM\Mapping\ClassMetadata;
use Doctrine\ORM\NonUniqueResultException;
use Doctrine\ORM\QueryBuilder;
use Symfony\Component\Security\Core\User\UserInterface;
use Symfony\Component\Security\Core\User\UserProviderInterface;
use Symfony\Component\Security\Core\Exception\UsernameNotFoundException;
use Symfony\Component\Security\Core\Exception\UnsupportedUserException;
use BeSimple\SsoAuthBundle\Security\Core\User\UserFactoryInterface;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\NoResultException;
use Doctrine\ORM\Repository\DefaultRepositoryFactory;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends EntityRepository implements UserProviderInterface, UserFactoryInterface {

    private $bethelApiKey;

    public function __construct(EntityManager $em, ClassMetadata $class, $bethelApiKey = null) {
        parent::__construct($em, $class);
        $this->bethelApiKey = $bethelApiKey;
    }

    public function getUsernameForApiKey($apiKey) {
        // Look up the username based on the token in the database, via
        // an API call, or do something entirely different
        if($apiKey == $this->bethelApiKey) {
            $username = 'apiuser';
        } else {
            $username = null;
        }

        return $username;
    }

    public function loadUserByUsername($username) {
        $em = $this->getEntityManager();
        // We must disable the SoftDeleteable filter so we can grab
        // "deactivated" users
        $em->getFilters()->disable('softdeleteable');
        $q = $this
            ->createQueryBuilder('u')
            ->where('u.username = :username')
            ->setParameter('username', $username)
            ->getQuery();

        try {
            // The Query::getSingleResult() method throws an exception
            // if there is no record matching the criteria.
            /** @var \Bethel\EntityBundle\Entity\User $user */
            $user = $q->getSingleResult();
        } catch (NoResultException $e) {
            // If the user successfully authenticated but doesn't exist
            // in our database, create a user with STUDENT role
            $roles = $em->getRepository('BethelEntityBundle:Role')->findBy(array(
                'role' => 'ROLE_STUDENT'
            ));
            $user = $this->createUser($username, $roles, array());
        } catch (NonUniqueResultException $e) {
            $users = $q->getResult();
            foreach($users as $multiUser) {
                if($multiUser->getDeletedAt() == null) {
                    $user = $multiUser;
                }
            }
        }

        // Reactivate the user if they had been previously deleted
        if($user->getDeletedAt()) {
            $user->setDeletedAt(null);
            $em->persist($user);
            $em->flush();
        }

        // Re-enable the SoftDeleteable filter
        $em->getFilters()->enable('softdeleteable');

        return $user;
    }

    public function refreshUser(UserInterface $user) {
        $class = get_class($user);
        if (!$this->supportsClass($class)) {
            throw new UnsupportedUserException(
                sprintf(
                    'Instances of "%s" are not supported.',
                    $class
                )
            );
        }

        return $this->find($user->getId());
    }

    public function supportsClass($class) {
        return $this->getEntityName() === $class
        || is_subclass_of($class, $this->getEntityName());
    }

    /**
     * Creates a new user for the given username
     *
     * @param string $username The username
     * @param array $roles Roles assigned to user
     * @param array $attributes Attributes provided by SSO server
     *
     * @return \Symfony\Component\Security\Core\User\UserInterface
     */
    public function createUser($username, array $roles, array $attributes) {
        $user = new User();
        $user->setUsername($username);
        $user->setEmail($username . '@bethel.edu');
        $user->setFirstName($username);
        $user->setLastName('');
        $em = $this->getEntityManager();
        foreach($roles as $role) {
            $user->addRole($role);
        }
        $em->persist($user);
        $em->flush();
        return $user;
    }


    /**
     * @param string $role
     * @return array
     */
    public function getUsersByRole($role) {
        // This gets Users by role NAME (Tutor, Student)
        // NOT role (ROLE_TUTOR, ROLE_STUDENT)
        $qb = $this->createQueryBuilder('u')
            ->innerJoin('u.roles','r','WITH','r.name = :role')
            ->setParameter('role', $role);
        return $qb->getQuery()->getResult();
    }

    /**
     * @param Semester $semester
     * @return array
     */
    public function getSemesterAttendees(Semester $semester) {
        $qb = $this->createQueryBuilder('st')
            ->select('st')
            ->innerJoin('st.studentSessions', 'ss')
            ->innerJoin('ss.session', 's')
            ->where('s.semester = :semester')
            ->setParameter('semester', $semester);

        return $qb->getQuery()->getResult();
    }

    /**
     * @param Course $course
     * @param Semester $semester
     * @return array
     */
    public function getCourseAttendees(Course $course, Semester $semester) {

        $qb = $this->createQueryBuilder('st')
            ->select('st')
            ->innerJoin('st.studentSessions', 'ss')
            ->innerJoin('ss.courses', 'c')
            ->innerJoin('ss.session', 's')
            ->where('c = :course')
            ->andWhere('s.semester = :semester')
            ->setParameter('course', $course)
            ->setParameter('semester', $semester);

        return $qb->getQuery()->getResult();
    }

    /**
     * Gets all tutors scheduled for a given session, both lead tutors
     * and regular tutors.
     *
     * @param Session $session
     * @return array
     */
    public function getScheduledTutors(Session $session, $nameSort = null) {
        $qb = $this->createQueryBuilder('u')
            ->select('u')
            ->where('u.id IN (SELECT u1.id FROM Bethel\EntityBundle\Entity\User u1 INNER JOIN u1.tutorSessions ts INNER JOIN ts.session s WHERE s = :session AND ts.schedTimeIn IS NOT NULL)')
            ->setParameter('session', $session);

        if($nameSort) {
            $qb
                ->addOrderBy('u.lastName')
                ->addOrderBy('u.firstName');
        }

        return $qb->getQuery()->getResult();
    }

    /**
     * Gets tutors scheduled for a given session, not including leads.
     *
     * @param Session $session
     * @return array
     */
    public function getNonLeadSessionTutors(Session $session) {
        $qb = $this->createQueryBuilder('u')
            ->select('u')
            ->where('u.id IN (SELECT u1.id FROM Bethel\EntityBundle\Entity\User u1 INNER JOIN u1.tutorSessions ts INNER JOIN ts.session s WHERE s = :session AND ts.lead = false)')
            ->setParameter('session', $session);

        return $qb->getQuery()->getResult();
    }

    /**
     * Gets lead tutors scheduled for a given session.
     *
     * @param Session $session
     * @return array
     */
    public function getLeadSessionTutors(Session $session) {
        $qb = $this->createQueryBuilder('u')
            ->select('u')
            ->where('u.id IN (SELECT u1.id FROM Bethel\EntityBundle\Entity\User u1 INNER JOIN u1.tutorSessions ts INNER JOIN ts.session s WHERE s = :session AND ts.lead = true)')
            ->setParameter('session', $session);

        return $qb->getQuery()->getResult();
    }

    /**
     * Get lead tutors for given schedule
     *
     * @param Schedule $schedule
     * @return array
     */
    public function getLeadScheduleTutors(Schedule $schedule) {
        $qb = $this->createQueryBuilder('u')
            ->select('u')
            ->where('u.id IN (SELECT u1.id FROM Bethel\EntityBundle\Entity\User u1 INNER JOIN u1.tutorSchedules ts INNER JOIN ts.schedule s WHERE s = :schedule AND ts.lead = true)')
            ->setParameter('schedule', $schedule);

        return $qb->getQuery()->getResult();
    }

    /**
     * Gets tutors scheduled for a given session, not including leads.
     *
     * @param Schedule $schedule
     * @return array
     */
    public function getNonLeadScheduleTutors(Schedule $schedule) {
        $qb = $this->createQueryBuilder('u')
            ->select('u')
            ->where('u.id IN (SELECT u1.id FROM Bethel\EntityBundle\Entity\User u1 INNER JOIN u1.tutorSchedules ts INNER JOIN ts.schedule s WHERE s = :schedule AND ts.lead = false)')
            ->setParameter('schedule', $schedule);

        return $qb->getQuery()->getResult();
    }

    /**
     * Gets all tutors who attended a given session.
     *
     * @param Session $session
     * @return array
     */
    public function getTutorAttendees(Session $session, $nameSort = null) {
        $qb = $this->createQueryBuilder('u')
            ->select('u')
            ->innerJoin('u.tutorSessions', 'ts')
            ->innerJoin('ts.session', 's')
            ->where('s = :session')
            ->andWhere('ts.timeIn IS NOT NULL')
            ->setParameter('session', $session);

        if($nameSort) {
            $qb
                ->addOrderBy('u.lastName')
                ->addOrderBy('u.firstName');
        }

        return $qb->getQuery()->getResult();
    }

    /**
     * Gets users with the roles specified in alphabetical order
     *
     * @param array $roles
     * @return QueryBuilder
     */
    public function queryAlphaByRoleQB($roles) {
        $qb = $this->createQueryBuilder('u');
        $qb->innerJoin('u.roles','r')
        ->where($qb->expr()->in('r', ':roles'))
        ->setParameter('roles', $roles)
        ->orderBy('u.lastName', 'ASC');

        return $qb;
    }

    public function getUsersWithSingleRole($role) {
        /*
        SELECT User.firstName, User.lastName, COUNT(Role.id) AS RoleCount
        FROM User
        JOIN user_role
        ON User.id = user_role.user_id
        JOIN Role
        ON user_role.role_id = Role.id
        WHERE User.id IN (
            SELECT User.id
            FROM User
            JOIN user_role
            ON User.id = user_role.user_id
            JOIN Role
            ON user_role.role_id = Role.id
            WHERE Role.name = 'Student'
        ) GROUP BY User.id
        HAVING RoleCount = 1;
        */

        $qb = $this->createQueryBuilder('u');
        $qb
        ->innerJoin('u.roles','r')
        ->where('u.id IN (SELECT u1.id FROM Bethel\EntityBundle\Entity\User u1 INNER JOIN u1.roles r1 WHERE r1.id = :role)')
        ->groupBy('u.id')
        ->having($qb->expr()->eq($qb->expr()->count('r.id'), 1))
        ->setParameter('role', $role);

        return $qb->getQuery()->getResult();
    }

    public function getCourseViewerCourses(User $user) {
        $qb = $this->createQueryBuilder('u');
        $qb
            ->select('c')
            ->from('Bethel\EntityBundle\Entity\Course', 'c')
            ->innerJoin('c.courseViewers','cv')
            ->where('cv.id = :user')
            ->setParameter('user', $user);

        return $qb->getQuery()->getResult();
    }
}
