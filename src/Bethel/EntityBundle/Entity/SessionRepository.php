<?php

namespace Bethel\EntityBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * SessionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SessionRepository extends EntityRepository
{

    /**
     * @param Semester $semester
     * @param bool $sortDesc
     * @return array
     */
    public function getClosedSessions(Semester $semester, $sortDesc = null) {
        $sortDir = $sortDesc ? 'DESC' : 'ASC';
        $qb = $this->createQueryBuilder('s');
        $qb
            ->where($qb->expr()->isNotNull('s.endTime'))
            ->andWhere('s.semester = :semester')
            ->setParameter('semester', $semester)
            ->addOrderBy('s.date', $sortDir)
            ->addOrderBy('s.startTime', $sortDir);

        return $qb->getQuery()->getResult();
    }

    public function getSessionAttendeeTotal($session) {

        $qb = $this->createQueryBuilder('s')
            ->select('count(distinct ss.student) + s.anonStudents')
            ->innerJoin('s.studentSessions','ss','WITH','ss.session = :session')
            ->setParameter('session', $session);
        return $qb->getQuery()->getSingleScalarResult();
    }


    /**
     * @param Session $session
     * @param Course $course
     * @param Semester $semester
     * @return mixed
     */
    public function getCourseSessionAttendeeTotal(Session $session, Course $course, Semester $semester) {
        $qb = $this->createQueryBuilder('s')
            ->select('count(ss)')
            ->innerJoin('s.studentSessions', 'ss')
            ->innerJoin('ss.courses', 'c')
            ->where('c = :course')
            ->andWhere('s = :session')
            ->andWhere('s.semester = :semester')
            ->setParameter('session', $session)
            ->setParameter('course', $course)
            ->setParameter('semester', $semester);

        return $qb->getQuery()->getSingleScalarResult();
    }

    /**
     * @param Course $course
     * @param Semester $semester
     * @return array
     */
    public function getCourseSessionsHeld(Course $course, Semester $semester) {

        $qb = $this->createQueryBuilder('s')
            ->select('s')
            ->innerJoin('s.courseCodes', 'cc')
            ->innerJoin('cc.courses', 'c')
            ->where('c = :course')
            ->andWhere('s.semester = :semester')
            ->andWhere('s.startTime IS NOT NULL')
            ->setParameter('course', $course)
            ->setParameter('semester', $semester)
            ->orderBy('s.date', 'DESC');

        return $qb->getQuery()->getResult();
    }


    /**
     * get sessions that include an attendance instance of
     * any of the courses in the list.
     *
     * @param $courses
     * @param $semester
     * @return array
     */
    public function getSessionsWithCourses($courses, $semester) {

        $qb = $this->createQueryBuilder('s');

        $qb
            ->select('count(distinct s.id)')
            ->innerJoin('s.courseCodes', 'cc')
            ->innerJoin('cc.courses', 'c')
            ->where($qb->expr()->in('c', ':courses'))
            ->andWhere('s.semester = :semester')
            ->andWhere('s.startTime IS NOT NULL')
            ->setParameter('courses', $courses)
            ->setParameter('semester', $semester);

        return $qb->getQuery()->getSingleScalarResult();
    }

    /**
     * All sessions held in a given semester
     *
     * @param Semester $semester
     * @return array
     */
    public function getSemesterSessions(Semester $semester) {
        $qb = $this->createQueryBuilder('s')
            ->where('s.semester = :semester')
            ->setParameter('semester', $semester);

        return $qb->getQuery()->getResult();
    }

    /**
     * @param Semester $semester
     * @return array
     */
    public function getInProgressOrClosedSessions(Semester $semester) {
        $qb = $this->createQueryBuilder('s')
            ->select('s')
            ->where('s.startTime IS NOT NULL')
            ->andWhere('s.semester = :semester')
            ->setParameter('semester', $semester);

        return $qb->getQuery()->getResult();
    }

    /**
     * @param $start \DateTime
     * @param $end \DateTime
     *
     * @return array
     */
    public function getSessionsInDateRange($start,$end) {

        $qb = $this->createQueryBuilder('s')
            ->where('s.date BETWEEN :start AND :end')
            ->setParameter('start', $start->format('Y-m-d'))
            ->setParameter('end', $end->format('Y-m-d'));

        return $qb->getQuery()->getResult();
    }

    /**
     * @param Semester $semester
     * @return array
     */
    public function getScheduledSessionsSortedByDate(Semester $semester) {
        $qb = $this->createQueryBuilder('s')
            ->orderBy('s.date')
            ->where('s.endTime IS NULL')
            ->andWhere('s.semester = :semester')
            ->andWhere('s.open = false')
            ->setParameter('semester',$semester);

        return $qb->getQuery()->getResult();
    }
}
