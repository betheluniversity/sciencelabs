<?php

namespace Bethel\EntityBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * SessionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class StudentSessionRepository extends EntityRepository
{

    /**
     * The number of StudentSessions that have occurred (total for the semester)
     * i.e. the number of times that a student has signed into a session
     *
     * @param Semester $semester
     * @return integer
     */
    public function getSemesterAttendees(Semester $semester) {
        // We've got to add in the anonymous students for the semester
        $sessionQb = $this->createQueryBuilder('ss')
            ->select('s.anonStudents')
            ->from('Bethel\EntityBundle\Entity\Session','s')
            ->where('s.semester = :semester')
            ->setParameter('semester', $semester)
            ->groupBy('s.id');

        $sessionAnonCounts = $sessionQb->getQuery()->getResult();
        $anonTotal = 0;
        foreach($sessionAnonCounts as $anonCount) {
            $anonTotal += $anonCount['anonStudents'];
        }

        $userCount = $this->getSemesterAttendanceCount($semester);

        return $anonTotal + $userCount;
    }

    /**
     * This is the number of unique students who have attended sessions
     *
     * @param Semester $semester
     * @return integer
     */
    public function getSemesterUniqueCount(Semester $semester) {
        $qb = $this->createQueryBuilder('ss')
            ->select('count(distinct ss.student)')
            ->innerJoin('ss.session', 's', 'WITH','s.semester = :semester')
            ->setParameter('semester', $semester);

        return $qb->getQuery()->getSingleScalarResult();
    }

    /**
     * Total number of student sessions in the given semester
     *
     * @param Semester $semester
     * @return mixed
     */
    public function getSemesterAttendanceCount(Semester $semester) {
        $qb = $this->createQueryBuilder('ss')
            ->select('count(ss)')
            ->innerJoin('ss.session', 's', 'WITH','s.semester = :semester')
            ->setParameter('semester', $semester);

        return $qb->getQuery()->getSingleScalarResult();
    }

    /**
     * @param Course $course
     * @param Semester $semester
     * @return integer
     */
    public function getCourseAttendeeTotal(Course $course, Semester $semester) {

        $qb = $this->createQueryBuilder('ss')
            ->select('count(c.id)')
            ->innerJoin('ss.session', 's', 'WITH', 's.semester = :semester')
            ->innerJoin('ss.courses','c','WITH','c.id = :courseId')
            ->setParameter('courseId', $course->getId())
            ->setParameter('semester',$semester);

        return $qb->getQuery()->getSingleScalarResult();
    }

    /**
     * @param Course $course
     * @param Semester $semester
     * @return integer
     */
    public function getCourseUniques(Course $course, Semester $semester) {
        $qb = $this->createQueryBuilder('ss')
            ->select('count(distinct ss.student)')
            ->innerJoin('ss.session', 's', 'WITH', 's.semester = :semester')
            ->innerJoin('ss.courses','c','WITH','c.id = :courseId')
            ->setParameter('courseId', $course->getId())
            ->setParameter('semester',$semester);

        return $qb->getQuery()->getSingleScalarResult();
    }

    /**
     * Sessions the given student has attended during the given semester
     *
     * @param User $student
     * @param Semester $semester
     * @param string|null $sort
     * @param User $professor
     * @return array
     */
    public function getSemesterAttendance(User $student, Semester $semester, $sort = null, User $professor = null) {
        if(!$sort) {
            $sort = 'ASC';
        }
        $qb = $this->createQueryBuilder('ss')
            ->select('ss')
            ->innerJoin('ss.session', 's', 'WITH', 's.semester = :semester');

        if($professor) {
            $qb
                ->innerJoin('ss.courses', 'c', 'WITH', 'c.semester = :semester')
                ->leftJoin('c.courseViewers', 'cv')
                ->leftJoin('c.professors', 'cp', 'WITH', 'cp.id = :professor')
                ->where('cv = :professor')
                ->andWhere('ss.student = :student')
                ->setParameter('professor', $professor)
                // these last 4 are duplicated  in the else statement. this is needed due to the where becoming andWhere
                ->where('ss.student = :student')
                ->setParameter('student', $student)
                ->setParameter('semester', $semester)
                ->orderBy('s.date', $sort);
        } else {
            $qb
                ->where('ss.student = :student')
                ->setParameter('student', $student)
                ->setParameter('semester', $semester)
                ->orderBy('s.date', $sort);
        }

        return $qb->getQuery()->getResult();
    }

    /**
     * Total attendance during a specific interval
     *
     * @param \DateTime $startTime
     * @param \DateTime $endTime
     * @return integer
     */

    // $qb = $this->createQueryBuilder('s')
    //         ->select('count(distinct ss.student) + s.anonStudents')
    //         ->innerJoin('s.studentSessions','ss','WITH','ss.session = :session')
    //         ->setParameter('session', $session);

    public function getTimeIntervalAttendance(\DateTime $startTime, \DateTime $endTime) {
        $qb = $this->createQueryBuilder('ss')
            ->select('count(ss)')
            ->innerJoin('ss.session', 's')
            ->where('s.date >= :startTime')
            ->andWhere('s.date <= :endTime')
            ->setParameter('startTime', $startTime)
            ->setParameter('endTime', $endTime);

        // We've got to add in the anonymous students for each session
        $sessionQb = $this->createQueryBuilder('ss')
            ->select('s.anonStudents')
            ->from('Bethel\EntityBundle\Entity\Session','s')
            ->where('s.date >= :startTime')
            ->andWhere('s.date <= :endTime')
            ->setParameter('startTime', $startTime)
            ->setParameter('endTime', $endTime)
            ->groupBy('s.id');

        $sessionAnonCounts = $sessionQb->getQuery()->getResult();
        $anonTotal = 0;
        foreach($sessionAnonCounts as $anonCount) {
            $anonTotal += $anonCount['anonStudents'];
        }
        $userCount = $qb->getQuery()->getSingleScalarResult();
        
        return $anonTotal + $userCount;
    }

    /**
     * The number of times the given student attended
     * a session during a semester
     *
     * @param User $student
     * @param Semester $semester
     * @return integer
     */
    public function getSemesterAttendanceTotal(User $student, Semester $semester) {
        $qb = $this->createQueryBuilder('ss')
            ->select('count(distinct ss.session)')
            ->innerJoin('ss.session', 's', 'WITH', 's.semester = :semester')
            ->where('ss.student = :student')
            ->setParameter('student', $student)
            ->setParameter('semester', $semester);

        return $qb->getQuery()->getSingleScalarResult();
    }

    /**
     * The number of times the given student attended
     * a session for a particular course
     *
     * @param User $student
     * @param Course $course
     * @param Semester $semester
     * @return integer
     */
    public function getCourseAttendanceCount(User $student, Course $course, Semester $semester) {
        $qb = $this->createQueryBuilder('ss')
            ->select('count(ss)')
            ->innerJoin('ss.courses', 'c', 'WITH', 'c = :course')
            ->innerJoin('ss.session', 's')
            ->where('ss.student = :student')
            ->andWhere('s.semester = :semester')
            ->setParameter('student', $student)
            ->setParameter('course', $course)
            ->setParameter('semester', $semester);

        return $qb->getQuery()->getSingleScalarResult();
    }

    /**
     * Student session objects where the given student attended
     * for the given course
     *
     * @param User $student
     * @param Course $course
     * @param Semester $semester
     * @return array
     */
    public function getCourseAttendance(User $student, Course $course, Semester $semester) {
        $qb = $this->createQueryBuilder('ss')
            ->select('ss')
            ->innerJoin('ss.courses', 'c', 'WITH', 'c = :course')
            ->innerJoin('ss.session', 's')
            ->where('ss.student = :student')
            ->andWhere('s.semester = :semester')
            ->setParameter('student', $student)
            ->setParameter('course', $course)
            ->setParameter('semester', $semester);

        return $qb->getQuery()->getResult();
    }

    /**
     * Sessions where a student indicated 'other'
     *
     * @param User $student
     * @param Semester $semester
     * @return integer
     */
    public function getStudentOtherSessions(User $student, Semester $semester) {
        $qb = $this->createQueryBuilder('ss')
            ->select('ss')
            ->innerJoin('ss.session', 's')
            ->where('ss.student = :student')
            ->andWhere('ss.otherCourse != 0')
            ->andWhere('s.semester = :semester')
            ->setParameter('student', $student)
            ->setParameter('semester', $semester);

        return $qb->getQuery()->getResult();
    }


    /**
     * Get the student sessions for a given course and session
     *
     * @param Course $course
     * @param Session $session
     * @return array
     */
    public function getSessionCourseAttendance(Course $course, Session $session, $nameSort = null) {
        $qb = $this->createQueryBuilder('ss')
            ->select('ss')
            ->innerJoin('ss.courses', 'c', 'WITH', 'c = :course')
            ->innerJoin('ss.student', 's')
            ->where('ss.session = :session ')
            ->setParameter('course', $course)
            ->setParameter('session', $session);

        if($nameSort) {
            $qb
                ->addOrderBy('s.lastName')
                ->addOrderBy('s.firstName');
        }

        return $qb->getQuery()->getResult();
    }

    /**
     * Get the student sessions for given courses and session
     *
     * @param array $courses
     * @param Session $session
     * @param bool $nameSort
     * @return array
     */
    public function getSessionAttendanceForCourses(array $courses, Session $session, $nameSort = null) {
        $qb = $this->createQueryBuilder('ss');
        $qb
            ->select('ss')
            ->innerJoin('ss.courses', 'c')
            ->innerJoin('ss.student', 's')
            ->where($qb->expr()->in('c', ':courses'))
            ->andWhere('ss.session = :session ')
            ->setParameter('courses', $courses)
            ->setParameter('session', $session);

        if($nameSort) {
            $qb
                ->addOrderBy('s.lastName')
                ->addOrderBy('s.firstName');
        }

        return $qb->getQuery()->getResult();
    }

    /**
     * Get the student sessions for "other" and session
     *
     * @param Session $session
     * @return array
     */
    public function getSessionOtherAttendance(Session $session) {
        $qb = $this->createQueryBuilder('ss');
        $qb
            ->select('ss')
            ->where('ss.session = :session ')
            ->andWhere('ss.otherCourse = 1')
            ->setParameter('session', $session);

        return $qb->getQuery()->getResult();
    }

    /**
     * Get the student sessions for session sorted by
     * student last name
     *
     * @param Session $session
     * @return array
     */
    public function getSessionAttendanceByLastName(Session $session) {
        $qb = $this->createQueryBuilder('ss');
        $qb
            ->select('ss')
            ->innerJoin('ss.student', 's')
            ->where('ss.session = :session')
            ->orderBy('s.lastName')
            ->setParameter('session', $session);

        return $qb->getQuery()->getResult();
    }

    /**
     * The number of students attending a session for a particular course
     *
     * @param Course $course
     * @param Session $session
     * @return integer
     */
    public function getSessionCourseAttendanceTotal(Course $course, Session $session) {
        $qb = $this->createQueryBuilder('ss')
            ->select('count(distinct ss.student)')
            ->innerJoin('ss.courses', 'c', 'WITH', 'c = :course')
            ->where('ss.session = :session')
            ->setParameter('course', $course)
            ->setParameter('session', $session);

        return $qb->getQuery()->getSingleScalarResult();
    }
}
