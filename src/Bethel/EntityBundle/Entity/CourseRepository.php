<?php

namespace Bethel\EntityBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\NoResultException;
use Doctrine\ORM\QueryBuilder;

/**
 * CourseRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CourseRepository extends EntityRepository {
    // Find courses in a given semester that have attendance instances


    /**
     * fetch courses which have had at least one student
     * attend during the given semester
     *
     * @param Semester $semester
     * @return array
     */
    public function getAttendedCourses(Semester $semester) {
        $qb = $this->createQueryBuilder('c')
            ->innerJoin('c.studentSessions','s','WITH','c.semester = :semesterId')
            ->setParameter('semesterId', $semester->getId())
            ->orderBy('c.dept, c.courseNum, c.section');

        return $qb->getQuery()->getResult();
    }

    /**
     * fetch courses for which the given student attended
     * at least one session during the given semester
     *
     * @param User $student
     * @param Semester $semester
     * @return array
     */
    public function getStudentCourses(User $student, Semester $semester) {
        $qb = $this->createQueryBuilder('c')
            ->innerJoin('c.studentSessions','s','WITH','s.student = :student')
            ->where('c.semester = :semester')
            ->setParameter('student', $student)
            ->setParameter('semester', $semester)
            ->orderBy('c.dept, c.courseNum, c.section');

        return $qb->getQuery()->getResult();
    }

    /**
     * fetch courses for which are associated with the given session
     *
     * @param Session $session
     * @return array
     */
    public function getSessionCourses(Session $session) {
        $qb = $this->createQueryBuilder('c')
            ->innerJoin('c.studentSessions','s','WITH','s.session = :session')
            ->setParameter('session', $session)
            ->orderBy('c.dept, c.courseNum, c.section');

        return $qb->getQuery()->getResult();
    }

    /**
     * fetch courses which have had at least one student
     * attend during the given session
     *
     * @param Session $session
     * @return array
     */
    public function getAttendedSessionCourses(Session $session) {
        $qb = $this->createQueryBuilder('c')
            ->innerJoin('c.studentSessions','s','WITH','s.session = :session')
            ->setParameter('session', $session)
            ->orderBy('c.dept, c.courseNum, c.section');

        return $qb->getQuery()->getResult();
    }

    public function getCoursesByCourseCodeAndSemester($dept, $courseNum, $semester) {
        $qb = $this->createQueryBuilder('c');
        $qb
            ->where('c.dept = :dept')
            ->andWhere('c.courseNum = :courseNum')
            ->andWhere('c.semester = :semester')
            ->setParameter('dept', $dept)
            ->setParameter('courseNum', $courseNum)
            ->setParameter('semester', $semester);

        return $qb->getQuery()->getResult();
    }

    /**
     * fetch courses for the given semester
     *
     * @param Semester $semester
     * @return QueryBuilder
     */
    public function getSemesterCoursesQB(Semester $semester=null) {
        if( $semester == null)
            $semester = $this->getActiveSemester();
        $qb = $this->createQueryBuilder('c')
            ->where('c.semester = :semesterId')
            ->setParameter('semesterId', $semester->getId())
            ->orderBy('c.dept, c.courseNum, c.section');

        return $qb;
    }

    public function getSemesterCourses(Semester $semester) {
        return $this->getSemesterCoursesQB($semester)->getQuery()->getResult();
    }

    public function getActiveSemesterCourses() {
        $semesterRepository = $this->em->getRepository('BethelEntityBundle:Semester');
        /** @var \Bethel\EntityBundle\Entity\Semester $activeSemester */
        $activeSemester = $semesterRepository->findOneBy(array('active'=>true));

        return $this->getSemesterCoursesQB($activeSemester)->getQuery()->getResult();
    }
}
